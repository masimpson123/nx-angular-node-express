"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.applicationSchematic = exports.applicationGenerator = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nrwl/devkit");
const node_1 = require("@nrwl/node");
const path_1 = require("path");
const init_1 = require("../init/init");
function addTypes(tree, options) {
    (0, devkit_1.updateJson)(tree, (0, path_1.join)(options.appProjectRoot, 'tsconfig.app.json'), (json) => {
        json.compilerOptions.types = [...json.compilerOptions.types, 'express'];
        return json;
    });
}
function addMainFile(tree, options) {
    tree.write((0, path_1.join)(options.appProjectRoot, `src/main.${options.js ? 'js' : 'ts'}`), `/**
 * This is not a production server yet!
 * This is only a minimal backend to get started.
 */

import * as express from 'express';

const app = express();

app.get('/api', (req, res) => {
  res.send({ message: 'Welcome to ${options.name}!' });
});

const port = process.env.port || 3333;
const server = app.listen(port, () => {
  console.log(\`Listening at http://localhost:\${port}/api\`);
});
server.on('error', console.error);
`);
    if (options.js) {
        (0, devkit_1.toJS)(tree);
    }
}
function applicationGenerator(tree, schema) {
    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
        const options = normalizeOptions(tree, schema);
        const initTask = yield (0, init_1.initGenerator)(tree, Object.assign(Object.assign({}, options), { skipFormat: true }));
        const applicationTask = yield (0, node_1.applicationGenerator)(tree, Object.assign(Object.assign({}, schema), { skipFormat: true }));
        addMainFile(tree, options);
        addTypes(tree, options);
        if (!options.skipFormat) {
            yield (0, devkit_1.formatFiles)(tree);
        }
        return () => (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            yield initTask();
            yield applicationTask();
        });
    });
}
exports.applicationGenerator = applicationGenerator;
exports.default = applicationGenerator;
exports.applicationSchematic = (0, devkit_1.convertNxGenerator)(applicationGenerator);
function normalizeOptions(host, options) {
    const appDirectory = options.directory
        ? `${(0, devkit_1.names)(options.directory).fileName}/${(0, devkit_1.names)(options.name).fileName}`
        : (0, devkit_1.names)(options.name).fileName;
    const { appsDir } = (0, devkit_1.getWorkspaceLayout)(host);
    const appProjectRoot = (0, devkit_1.joinPathFragments)(appsDir, appDirectory);
    return Object.assign(Object.assign({}, options), { appProjectRoot });
}
//# sourceMappingURL=application.js.map
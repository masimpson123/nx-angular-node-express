"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateConfigFiles = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nrwl/devkit");
const workspace_1 = require("@nrwl/workspace");
function updateConfigFiles(host, options) {
    updateTsConfigOptions(host, options);
    updateAppAndE2EProjectConfigurations(host, options);
}
exports.updateConfigFiles = updateConfigFiles;
function updateTsConfigOptions(host, options) {
    // tsconfig.app.json
    (0, devkit_1.updateJson)(host, `${options.appProjectRoot}/tsconfig.app.json`, (json) => (Object.assign(Object.assign({}, json), { extends: './tsconfig.json', compilerOptions: Object.assign(Object.assign({}, json.compilerOptions), { outDir: `${(0, devkit_1.offsetFromRoot)(options.appProjectRoot)}dist/out-tsc`, target: 'ES2017' }), exclude: [
            ...new Set([...(json.exclude || []), '**/*.test.ts', '**/*.spec.ts']),
        ] })));
}
function updateAppAndE2EProjectConfigurations(host, options) {
    // workspace.json
    const project = (0, devkit_1.readProjectConfiguration)(host, options.name);
    let fixedProject = (0, workspace_1.replaceAppNameWithPath)(project, options.name, options.appProjectRoot);
    delete fixedProject.targets.test;
    // Ensure the outputs property comes after the executor for
    // better readability.
    const _a = fixedProject.targets.build, { executor } = _a, rest = (0, tslib_1.__rest)(_a, ["executor"]);
    fixedProject.targets.build = Object.assign({ executor, outputs: ['{options.outputPath}'] }, rest);
    if (fixedProject.generators) {
        delete fixedProject.generators;
    }
    if (options.port) {
        fixedProject.targets.serve = Object.assign(Object.assign({}, fixedProject.targets.serve), { options: Object.assign(Object.assign({}, fixedProject.targets.serve.options), { port: options.port }) });
    }
    fixedProject.tags = options.parsedTags;
    (0, devkit_1.updateProjectConfiguration)(host, options.name, fixedProject);
    if (options.unitTestRunner === "none" /* None */) {
        host.delete(`${options.appProjectRoot}/src/app/app.component.spec.ts`);
        host.delete(`${options.appProjectRoot}/tsconfig.spec.json`);
    }
    if (options.e2eTestRunner === "none" /* None */) {
        const projects = (0, devkit_1.getProjects)(host);
        if (projects.has(options.e2eProjectName)) {
            (0, devkit_1.removeProjectConfiguration)(host, options.e2eProjectName);
        }
    }
    // delete some default test configs
    host.delete(`${options.appProjectRoot}/karma.conf.js`);
    host.delete(`${options.appProjectRoot}/src/test.ts`);
}
//# sourceMappingURL=update-config-files.js.map